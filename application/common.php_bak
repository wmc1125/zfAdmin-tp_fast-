<?php
// +----------------------------------------------------------------------
// | ThinkPHP [ WE CAN DO IT JUST THINK ]
// +----------------------------------------------------------------------
// | Copyright (c) 2006-2016 http://thinkphp.cn All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: 流年 <liu21st@gmail.com>
// +----------------------------------------------------------------------

// 应用公共文件
use think\Db;
use Qiniu\Auth as QAuth;
use Qiniu\Storage\BucketManager;
use Qiniu\Storage\UploadManager;

// 应用公共文件
/**
* 公共方法
*/
/**
 * 获取插件类的类名
 * @param strng $name 插件名
 * @param string $ext 扩展名
 */
function get_addon_class($name, $ext = 'EXT')
{
    // 初始化命名空间及类名
    $class = "addons\\{$name}\\" . ucfirst($name);
    return $class;
}

/**
 * 处理插件钩子
 * @param string $hook   钩子名称
 * @param mixed $params 传入参数
 * @return void
 */
function hook($hook, $params = [])
{
    // 钩子调用
    \think\facade\Hook::listen($hook, $params);
}

//成功之后返回json
function jssuccess($msg, $url = 'back') {
  echo json_encode(array("msg" => $msg, "url" => $url, "result" => '1'));exit;
}
//失败之后返回json
function jserror($msg, $url = 'back') {
  echo json_encode(array("msg" => $msg, "url" => $url, "result" => '0'));exit;
}
function dd($msg=''){
  echo "<pre>";
  var_dump($msg);die;
}
function d($t='user'){
  echo DB::table($t)->getlastsql();
}
/**
* 数组 转 对象
*
* @param array $arr 数组
* @return object
*/
function array_to_object($arr) {
  if (gettype($arr) != 'array') {
      return;
  }
  foreach ($arr as $k => $v) {
      if (gettype($v) == 'array' || getType($v) == 'object') {
          $arr[$k] = (object)array_to_object($v);
      }
  }

  return (object)$arr;
}

/**
* 对象 转 数组
*
* @param object $obj 对象
* @return array
*/
function object_to_array($obj) {
  $obj = (array)$obj;
  foreach ($obj as $k => $v) {
      if (gettype($v) == 'resource') {
          return;
      }
      if (gettype($v) == 'object' || gettype($v) == 'array') {
          $obj[$k] = (array)object_to_array($v);
      }
  }

  return $obj;
}
/**
 * 循环删除目录和文件
 * @param string $dir_name
 * @return bool
 */
function delete_dir_file($dir_name) {
    $result = false;
    if(is_dir($dir_name)){
        if ($handle = opendir($dir_name)) {
            while (false !== ($item = readdir($handle))) {
                if ($item != '.' && $item != '..') {
                    if (is_dir($dir_name . DS . $item)) {
                        delete_dir_file($dir_name . DS . $item);
                    } else {
                        unlink($dir_name . DS . $item);
                    }
                }
            }
            closedir($handle);
            if (rmdir($dir_name)) {
                $result = true;
            }
        }
    }

    return $result;
}
/**
 * 返回文件格式
 * @param  string $str 文件名
 * @return string      文件格式
 */
function file_format($str){
    // 取文件后缀名
    $str=strtolower(pathinfo($str, PATHINFO_EXTENSION));
    // 图片格式
    $image=array('webp','jpg','png','ico','bmp','gif','tif','pcx','tga','bmp','pxc','tiff','jpeg','exif','fpx','svg','psd','cdr','pcd','dxf','ufo','eps','ai','hdri');
    // 视频格式
    $video=array('mp4','avi','3gp','rmvb','gif','wmv','mkv','mpg','vob','mov','flv','swf','mp3','ape','wma','aac','mmf','amr','m4a','m4r','ogg','wav','wavpack');
    // 压缩格式
    $zip=array('rar','zip','tar','cab','uue','jar','iso','z','7-zip','ace','lzh','arj','gzip','bz2','tz');
    // 文档格式
    $text=array('exe','doc','ppt','xls','wps','txt','lrc','wfs','torrent','html','htm','java','js','css','less','php','pdf','pps','host','box','docx','word','perfect','dot','dsf','efe','ini','json','lnk','log','msi','ost','pcs','tmp','xlsb');
    // 匹配不同的结果
    switch ($str) {
        case in_array($str, $image):
            return 'image';
            break;
        case in_array($str, $video):
            return 'video';
            break;
        case in_array($str, $zip):
            return 'zip';
            break;
        case in_array($str, $text):
            return 'text';
            break;
        default:
            return 'other';
            break;
    }
}

/**
* 修改扩展配置文件
* @param array  $arr  需要更新或添加的配置
* @param string $file 配置文件名(不需要后辍)
* @return bool
*/
function extraconfig($arr = [], $file = '')
{
  if (is_array($arr)) {
      $filename = $file . '.php';

      $filepath ='./config/' . $filename;
      if (!file_exists($filepath)) {
          $conf = "<?php return [];";
          file_put_contents($filepath, $conf);
      }

      $conf = include $filepath;
      foreach ($arr as $key => $value) {
          $conf[$key] = $value;
      }

      $time = date('Y/m/d H:i:s');
      $str = "<?php\r\n/**\r\n * 站点信息最后修改于 \r\n * $time\r\n */\r\nreturn [\r\n";
      foreach ($conf as $key => $value) {
          $str .= "\t'$key' => '$value',";
          $str .= "\r\n";
      }
      $str .= '];';

      file_put_contents($filepath, $str);
      
      return true;
  } else {
      return false;
  }
}

/**
* 解析sql语句
* @param  string $content sql内容
* @param  int $limit  如果为1，则只返回一条sql语句，默认返回所有
* @param  array $prefix 替换表前缀
* @return array|string 除去注释之后的sql语句数组或一条语句
*/
function parse_sql($sql = '', $limit = 0, $prefix = []) {
  // 被替换的前缀
  $from = '';
  // 要替换的前缀
  $to = '';
  // 替换表前缀
  if (!empty($prefix)) {
      $to   = current($prefix);
      $from = current(array_flip($prefix));
  }
  if ($sql != '') {
      // 纯sql内容
      $pure_sql = [];
      // 多行注释标记
      $comment = false;
      // 按行分割，兼容多个平台
      $sql = str_replace(["\r\n", "\r"], "\n", $sql);
      $sql = explode("\n", trim($sql));
      // 循环处理每一行
      foreach ($sql as $key => $line) {
          // 跳过空行
          if ($line == '') {
              continue;
          }
          // 跳过以#或者--开头的单行注释
          if (preg_match("/^(#|--)/", $line)) {
              continue;
          }
          // 跳过以/**/包裹起来的单行注释
          if (preg_match("/^\/\*(.*?)\*\//", $line)) {
              continue;
          }
          // 多行注释开始
          if (substr($line, 0, 2) == '/*') {
              $comment = true;
              continue;
          }
          // 多行注释结束
          if (substr($line, -2) == '*/') {
              $comment = false;
              continue;
          }
          // 多行注释没有结束，继续跳过
          if ($comment) {
              continue;
          }
          // 替换表前缀
          if ($from != '') {
              $line = str_replace('`'.$from, '`'.$to, $line);
          }
          if ($line == 'BEGIN;' || $line =='COMMIT;') {
              continue;
          }
          // sql语句
          array_push($pure_sql, $line);
      }
      // 只返回一条语句
      if ($limit == 1) {
          return implode($pure_sql, "");
      }
      // 以数组形式返回sql语句
      $pure_sql = implode($pure_sql, "\n");
      $pure_sql = explode(";\n", $pure_sql);
      return $pure_sql;
  } else {
      return $limit == 1 ? '' : [];
  }
}


/**
*获取某个目录下的php文件名的函数
*/
function getControllers($dir) {
  $pathList = glob($dir . '/*.php');
  $res = [];
  foreach($pathList as $key => $value) {
      $res[] = basename($value, '.php');
  }
  return $res;
}
/**
*获取某个控制器的方法名的函数
*此方法过滤父级Base控制器的方法，只保留自己的
*/
function getActions($className, $base='\app\admin\controller\Admin') {
  $methods = get_class_methods(new $className());//当前控制器方法
  $baseMethods = get_class_methods(new $base());//通用方法
  $res = array_diff($methods, $baseMethods);
  return $res;
}



//计算整个目录文件大小/文件数量
function getDirInfo($dir, $f = 'size') {
  $result['size'] = '';
  $result['count'] = '';

  $handle = opendir($dir); //打开文件流
  while (($FolderOrFile = readdir($handle)) !== false) {//循环判断文件是否可读
      if ($FolderOrFile != "." && $FolderOrFile != "..") {
          if (is_dir("$dir/$FolderOrFile")) {//判断是否是目录
              $result['size'] += getDirSize("$dir/$FolderOrFile"); //递归调用
          } else {
              $result['size'] += filesize("$dir/$FolderOrFile");
              $result['count']++;
          }
      }
  }
  closedir($handle); //关闭文件流
  $result = ($f == 'size') ? $result['size'] : $result['count']; //返回大小或数量
  return $result;
}
// 单位自动转换函数
function getRealSize($size) {
    $kb = 1024;         // Kilobyte
    $mb = 1024 * $kb;   // Megabyte
    $gb = 1024 * $mb;   // Gigabyte
    $tb = 1024 * $gb;   // Terabyte

    if ($size < $kb) {
        return $size . " B";
    } else if ($size < $mb) {
        return round($size / $kb, 2) . " KB";
    } else if ($size < $gb) {
        return round($size / $mb, 2) . " MB";
    } else if ($size < $tb) {
        return round($size / $gb, 2) . " GB";
    } else {
        return round($size / $tb, 2) . " TB";
    }
}

//汉字转拼音
function get_pinyin($srt = '') {
    $py = new Pinyin();
    return $py->output($srt); //输出
}
//遍历删除目录和目录下所有文件
function del_dir($dir){
  if (!is_dir($dir)){
    return false;
  }
  $handle = opendir($dir);
  while (($file = readdir($handle)) !== false){
    if ($file != "." && $file != ".."){
      is_dir("$dir/$file")? del_dir("$dir/$file"):@unlink("$dir/$file");
    }
  }
  if (readdir($handle) == false){
    closedir($handle);
    @rmdir($dir);
  }
}

/**
 * 七牛云上传
 */
function qny_upload($key, $filePath){
  require_once APP_PATH . '/../vendor/qiniu/autoload.php';
  // 需要填写你的 Access Key 和 Secret Key
  $accessKey = config("qiniu.ACCESSKEY");
  $secretKey = config("qiniu.SECRETKEY");
  // 构建鉴权对象
  $auth = new QAuth($accessKey, $secretKey);
  // 要上传的空间
  $bucket = config("qiniu.BUCKET");
  $domain = config("qiniu.DOMAINImage");
  $token = $auth->uploadToken($bucket);
  // 初始化 UploadManager 对象并进行文件的上传
  $uploadMgr = new UploadManager();
  // 调用 UploadManager 的 putFile 方法进行文件的上传
  list($ret, $err) = $uploadMgr->putFile($token, $key, $filePath);
  if ($err !== null) {
      return jserror(["err"=>1,"msg"=>$err,"name"=>""]);die;
  } else {
      //返回图片的完整URL
      return  jssuccess(["err"=>0,"msg"=>"上传完成","name"=>$ret['key']]);die;
  }
}
/**
 * 七牛云删除
 */
function qny_del($name){
  $delFileName = input("name");
  if( $delFileName ==null){
      return jserror("参数不正确"); die;
  }
  require_once APP_PATH . '/../vendor/qiniu/autoload.php';
  // 构建鉴权对象
  $auth = new QAuth(config("qiniu.ACCESSKEY"),config("qiniu.SECRETKEY"));
  // 配置
  $config = new \Qiniu\Config();
  // 管理资源
  $bucketManager = new \Qiniu\Storage\BucketManager($auth, $config);
  // 删除文件操作
  $res = $bucketManager->delete(config("qiniu.BUCKET"), $delFileName);
  if (is_null($res)) {
      return jssuccess("删除成功");
  }else{
      return jserror("删除失败");
  }
}

function get_category_list($id){
    $menu_r =Db::name('post')->field("title,append")->where('cid',$id)->where('status','1')->order("sort asc")->select();
    return $menu_r;
}
/*
彩虹字符串
 */
function color_txt($str){
    $len        = mb_strlen($str);
    $colorTxt   = '';
    for($i=0; $i<$len; $i++) {
        $colorTxt .=  '<span style="color:'.rand_color().'">'.mb_substr($str,$i,1,'utf-8').'</span>';
    }
    return $colorTxt;
}
// 随机颜色
function rand_color(){
    return '#'.sprintf("%02X",mt_rand(0,255)).sprintf("%02X",mt_rand(0,255)).sprintf("%02X",mt_rand(0,255));
}
// 输出日志
function logOutput($data) {
    //数据类型检测
    if (is_array($data)) {
        $data = json_encode($data);
    }
    $filename = date("Y-m-d").".log";
    $str = date("Y-m-d H:i:s")."   $data"."\n";
    file_put_contents($filename, $str, FILE_APPEND|LOCK_EX);
    return null;
}
  /**
 * 功能：是否是移动端
 *
 * User: cyf
 * Time: 2018/7/3 0003 11:01
 * @return bool
 */
function isMobile()
{
    if (isset ($_SERVER['HTTP_X_WAP_PROFILE']))
    {
        return true;
    }
    if (isset ($_SERVER['HTTP_VIA']))
    {
        return stristr($_SERVER['HTTP_VIA'], "wap") ? true : false;
    }
    if (isset ($_SERVER['HTTP_USER_AGENT']))
    {
        $clientkeywords = array ('nokia','sony','ericsson','mot','samsung','htc','sgh','lg','sharp','sie-','philips','panasonic','alcatel','lenovo','iphone','ipod','blackberry','meizu','android','netfront','symbian','ucweb','windowsce','palm','operamini','operamobi','openwave','nexusone','cldc','midp','wap','mobile');
        if (preg_match("/(" . implode('|', $clientkeywords) . ")/i", strtolower($_SERVER['HTTP_USER_AGENT']))){
            return true;
        }
    }
    if (isset ($_SERVER['HTTP_ACCEPT']))
    {
        if ((strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') !== false) && (strpos($_SERVER['HTTP_ACCEPT'], 'text/html') === false || (strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') < strpos($_SERVER['HTTP_ACCEPT'], 'text/html'))))
        {
            return true;
        }
    }
    return false;
}

// 验证邮箱
function check_email($email){
    if (preg_match("/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,})$/",$email,$arr)){
        return $arr;
    }else{
        return false;
    }
}

//判断url地址是否完整,不完整进行拼接
function zf_joint_url($domain='',$url=''){
  $isurl=@get_headers($url);
  if(!$isurl){
      if($url[0].$url[1]=='//'){
          return $url; // 合法
      }else{
          if($url[0]=='/'){
              return $domain.$url;
          }else{
              return $domain.'/'.$url;
          }
      }
  }else{
      return $url;
  }
}


/*
* 发起POST网络提交
* @params string $url : 网络地址
* @params json $data ： 发送的json格式数据
*/
function https_post($url,$data)
{
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_URL, $url);
    if (!empty($data)){
        curl_setopt($curl, CURLOPT_POST, 1);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
    }
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    $output = curl_exec($curl);
    curl_close($curl);
    return $output;
}
 /*
* 发起GET网络提交
* @params string $url : 网络地址
*/
function https_get($url)
{
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE); 
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE); 
    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE); 
    curl_setopt($curl, CURLOPT_HEADER, FALSE) ; 
    curl_setopt($curl, CURLOPT_TIMEOUT,60);
    if (curl_errno($curl)) {
        return 'Errno'.curl_error($curl);
    }
    else{$result=curl_exec($curl);}
    curl_close($curl);
    return $result;
}
//加密
function encrypt($data, $key='zf')
{
    $key    =    md5($key);
    $x        =    0;
    $len    =    strlen($data);
    $l        =    strlen($key);
    $char = '';
    $str = '';
    for ($i = 0; $i < $len; $i++)
    {
        if ($x == $l) 
        {
            $x = 0;
        }
        $char .= $key{$x};
        $x++;
    }
    for ($i = 0; $i < $len; $i++)
    {
        $str .= chr(ord($data{$i}) + (ord($char{$i})) % 256);
    }
    return base64_encode($str);
}

//解密
function decrypt($data, $key='zf')
{
    $key = md5($key);
    $x = 0;
    $data = base64_decode($data);
    $len = strlen($data);
    $l = strlen($key);
    $char = '';
    $str = '';
    for ($i = 0; $i < $len; $i++)
    {
        if ($x == $l) 
        {
            $x = 0;
        }
        $char .= substr($key, $x, 1);
        $x++;
    }
    for ($i = 0; $i < $len; $i++)
    {
        if (ord(substr($data, $i, 1)) < ord(substr($char, $i, 1)))
        {
            $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1)));
        }
        else
        {
            $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1)));
        }
    }
    return $str;
}
function GetfourStr($len) 
{ 
  $chars_array = array( 
    "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
    "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", 
    "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", 
    "S", "T", "U", "V", "W", "X", "Y", "Z", 
  ); 
  $charsLen = count($chars_array) - 1; 
  
  $outputstr = ""; 
  for ($i=0; $i<$len; $i++) 
  { 
    $outputstr .= $chars_array[mt_rand(0, $charsLen)]; 
  } 
  return $outputstr; 
} 
/**
 * 获取替换文章中的图片路径
 * @param string $xstr 内容
 * @param string $keyword 创建照片的文件名
 * @param string $oriweb 网址
 * @return string
 * 
 */
function replaceimg($xstr, $oriweb,$param_src='src',$keyword='caiji'){ 
    //保存路径
    $d = date('Ymd', time());
    $dirslsitss = './upload/'.$keyword.'/'.$d;//分类是否存在
    if(!is_dir($dirslsitss)) {
        mkdir($dirslsitss, 0755,true);
    }
    //匹配图片的src
    preg_match_all('#<img.*?'.$param_src.'="([^"]*)"[^>]*>#i', $xstr, $match);
    foreach($match[1] as $imgurl){
        $imgurl = $imgurl;
        if(is_int(strpos($imgurl, 'http'))){
            $arcurl = $imgurl;
        } else {
            $arcurl = $oriweb.$imgurl;        
        }
        $img=file_get_contents($arcurl);
        if(!empty($img)) {
            //保存图片到服务器
            $fileimgname = time()."-".rand(1000,9999).".jpg";
            $filecachs=$dirslsitss."/".$fileimgname;
            if (!file_exists($dirslsitss)) {
              mkdir($dirslsitss);
            }
            $fanhuistr = file_put_contents( $filecachs, $img );
            $saveimgfile = "/upload/$keyword"."/".$d."/".$fileimgname;

            
            $xstr=str_replace($imgurl,$saveimgfile,$xstr);
        }
    }
    return $xstr;
}
// 笛卡尔积
/*
$arr = array(
  array(2),
  array(6,7),
  array('a','b','c')
);
 */ 
function dikaer($arr){
   $arr1 = array();
   $result = array_shift($arr);
   while($arr2 = array_shift($arr)){
    $arr1 = $result;
    $result = array();
    foreach($arr1 as $v){
     foreach($arr2 as $v2){
      if(!is_array($v))$v = array($v);
      if(!is_array($v2))$v2 = array($v2);
      $result[] = array_merge_recursive($v,$v2);
     }
    }
   }
   return $result;
}
//dikaerj  以字符串形式输出
function dikaer_str($arr){
   $arr1 = array();
   $result = array_shift($arr);
   while($arr2 = array_shift($arr)){
    $arr1 = $result;
    $result = array();
    foreach($arr1 as $v){
     foreach($arr2 as $v2){
      $result[] = $v.','.$v2;
     }
    }
   }
   return $result;
}

function rand_post_first_pic($content){
    $pattern="/<[img|IMG].*?src=[\'|\"](.*?(?:[\.gif|\.jpg|\.png]))[\'|\"].*?[\/]?>/"; 
    preg_match_all($pattern,$content,$matchContent); 
    if(isset($matchContent[1][0])){ 
        return $matchContent[1][0]; 
    }else{ 
        return "https://mctool.wangmingchang.com/api/api/sinaimg/t/large/sid/007goYVsgy1g5m2rdby9hj30ku0am74j";//在相应位置放置一张命名为no-image的jpg图片 
    } 
}
// ------------数据库操作-----------------
function get_cate_list($id){
    $menu_r =Db::name('category')->where(['pid'=>$id,'status'=>1,'menu'=>1])->order("sort asc")->select();
    return $menu_r;
}

//查询文章名称
function post_info($id){
    $res =Db::name('post')->where(['status'=>1,'id'=>$id])->order("id desc")->find();
    return $res;
}
function product_cate_name($cid){
   $res =Db::name('product_cate')->where(['status'=>1,'cid'=>$cid])->value('name');
    return $res;
}
//查询用户名字
function  user_name($id){
  $name =Db::name('user')->where('id',$id)->value('name');
  if($name){
    return $name;
  }else{
    return false;
  }
}
function get_order_goods_list($oid,$limit='4'){
    $list =Db::name('order_goods')->where('oid',$oid)->limit($limit)->order("id asc")->select();
    return $list;
}
function get_post_res($id){
    $list =Db::name('post')->field("title,append,pic,id,price")->where('id',$id)->find();
    return $list;
}
function get_sku_info($data,$gid,$type=1){
    foreach ($data as $k => $vo) {
      $whereor[] = ['sku_id','=',$vo];
    }
    $r_parm =Db::name('product_sku_info_parm')->field('info_id,id,sku_id ,count(id) as sumii')->whereor($whereor)->group('info_id')->where(function ($query)  use($gid) {
      $query->where(['uid'=>session('admin')['id'],'gid'=>$gid,'status'=>1]);
    })->order("sumii desc,id desc")->find();
    $info_id = $r_parm['info_id'];
    if($info_id){
      $res = Db::name('product_sku_info')->where(['id'=>$info_id,'status'=>1])->find();
      if($res){
        return $res;
      }else{
        return false;
      }
    }else{
      return false;
    }
}


